%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2406 613
%%HiResBoundingBox: 0 0 2406 612.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2406 612.95996 re
W
q
[0.24 0 0 -0.24 0 612.95996] cm
q
0 0 10025 2553.125 re
W*
q
[3.124661 0 0 3.126115 0.023792 0] cm
/DeviceRGB {} CS
[0.2235 0.2431 0.2745] SC
/DeviceRGB {} cs
[0.2235 0.2431 0.2745] sc
0 0 3208.3333 817.70831 re
f
Q
q
[29.293695 0 0 29.307329 325.50928 325.63699] cm
/DeviceRGB {} CS
[0.9843 0.4275 0.2392] SC
/DeviceRGB {} cs
[0.9843 0.4275 0.2392] sc
10 0 m
65 0 l
65.163658 0 65.327217 0.004015 65.490677 0.012045 c
65.654137 0.020076 65.817299 0.032111 65.980171 0.048153 c
66.143036 0.064194 66.305412 0.084221 66.4673 0.108235 c
66.629189 0.132248 66.790382 0.160219 66.95089 0.192147 c
67.111404 0.224075 67.271042 0.259922 67.429794 0.299687 c
67.588539 0.339453 67.746223 0.383089 67.902832 0.430597 c
68.059441 0.478104 68.21479 0.529425 68.368881 0.584559 c
68.522972 0.639694 68.675613 0.698576 68.82682 0.761205 c
68.978027 0.823834 69.127594 0.890134 69.275536 0.960107 c
69.423485 1.03008 69.569626 1.10364 69.713959 1.180787 c
69.858284 1.257935 70.000641 1.338577 70.141014 1.422714 c
70.281387 1.50685 70.419609 1.59438 70.555687 1.685304 c
70.691772 1.776227 70.825539 1.870434 70.956985 1.967925 c
71.08844 2.065415 71.217422 2.166072 71.343925 2.269896 c
71.470436 2.373719 71.594322 2.480583 71.715584 2.590489 c
71.836838 2.700394 71.95533 2.813209 72.07106 2.928932 c
72.186783 3.044655 72.299599 3.163148 72.4095 3.28441 c
72.519409 3.405672 72.626274 3.529558 72.730103 3.656067 c
72.833923 3.782576 72.934578 3.911555 73.032074 4.043006 c
73.129555 4.174457 73.223763 4.308221 73.31469 4.444297 c
73.405609 4.580373 73.493141 4.718598 73.577278 4.858972 c
73.661423 4.999346 73.742065 5.141699 73.819214 5.286032 c
73.896355 5.430365 73.969917 5.576504 74.039886 5.724448 c
74.109856 5.872393 74.176155 6.021965 74.238785 6.173165 c
74.301414 6.324365 74.360298 6.47701 74.415428 6.631101 c
74.470566 6.785191 74.521889 6.940542 74.569397 7.097153 c
74.616905 7.253763 74.660538 7.411445 74.70031 7.570198 c
74.740067 7.72895 74.775917 7.888583 74.807846 8.049096 c
74.839775 8.209609 74.867744 8.370809 74.891754 8.532695 c
74.915771 8.694581 74.935799 8.856959 74.951843 9.019829 c
74.967888 9.182698 74.979919 9.345862 74.987953 9.509323 c
74.995987 9.672784 75 9.836343 75 10 c
75 55 l
75 55.163654 74.995987 55.327213 74.987953 55.490673 c
74.979919 55.654137 74.967888 55.817303 74.951843 55.980171 c
74.935799 56.14304 74.915771 56.305416 74.891754 56.4673 c
74.867744 56.629185 74.839775 56.790382 74.807846 56.950897 c
74.775917 57.111408 74.740067 57.271042 74.70031 57.429798 c
74.660538 57.588547 74.616905 57.746231 74.569397 57.902843 c
74.521889 58.059452 74.470566 58.214802 74.415428 58.368896 c
74.360298 58.522987 74.301414 58.675632 74.238785 58.826832 c
74.176155 58.978031 74.109856 59.127602 74.039879 59.275547 c
73.96991 59.423492 73.896347 59.56963 73.819206 59.713963 c
73.742058 59.858295 73.661415 60.000648 73.577278 60.141026 c
73.493141 60.281399 73.405609 60.419624 73.31469 60.555702 c
73.223763 60.691776 73.129555 60.825542 73.032074 60.956993 c
72.934578 61.088444 72.833923 61.217426 72.730103 61.343933 c
72.626274 61.470444 72.519409 61.59433 72.4095 61.715588 c
72.299599 61.836853 72.186783 61.955345 72.07106 62.071068 c
71.95533 62.18679 71.836838 62.299606 71.715584 62.409512 c
71.59433 62.519417 71.470444 62.626282 71.343933 62.730106 c
71.217422 62.833931 71.08844 62.934586 70.956985 63.03207 c
70.825539 63.129562 70.691772 63.223766 70.555687 63.31469 c
70.419609 63.405613 70.281387 63.493141 70.141014 63.577282 c
70.000641 63.661419 69.858284 63.742062 69.713951 63.819214 c
69.569618 63.896362 69.423477 63.969921 69.275536 64.039894 c
69.127594 64.109863 68.978027 64.176163 68.82682 64.238792 c
68.675613 64.301422 68.522972 64.360298 68.368881 64.415436 c
68.21479 64.470573 68.059448 64.521896 67.90284 64.569405 c
67.746223 64.616913 67.588539 64.660545 67.429794 64.70031 c
67.271042 64.740067 67.111404 64.775917 66.95089 64.807846 c
66.790382 64.839775 66.629189 64.867744 66.4673 64.891754 c
66.305412 64.915764 66.143036 64.935799 65.980171 64.951843 c
65.817299 64.967888 65.654137 64.979919 65.490677 64.987953 c
65.327217 64.995987 65.163658 65 65 65 c
10 65 l
9.836343 65 9.672784 64.995987 9.509323 64.987953 c
9.345862 64.979919 9.182698 64.967888 9.019829 64.951843 c
8.856959 64.935799 8.694581 64.915764 8.532695 64.891754 c
8.370809 64.867744 8.209609 64.839775 8.049096 64.807846 c
7.888583 64.775917 7.72895 64.740067 7.570198 64.700302 c
7.411445 64.660545 7.253763 64.616913 7.097153 64.569405 c
6.940542 64.521896 6.785191 64.470573 6.6311 64.415443 c
6.47701 64.360306 6.324365 64.301422 6.173165 64.238792 c
6.021965 64.176163 5.872393 64.109863 5.724448 64.039894 c
5.576504 63.969921 5.430366 63.896362 5.286033 63.819214 c
5.141699 63.742062 4.999346 63.661419 4.858972 63.577282 c
4.718598 63.493141 4.580373 63.405613 4.444297 63.31469 c
4.308221 63.223766 4.174457 63.129562 4.043006 63.03207 c
3.911555 62.934586 3.782576 62.833931 3.656067 62.730106 c
3.529558 62.626282 3.405672 62.519417 3.28441 62.409512 c
3.163148 62.299606 3.044655 62.18679 2.928932 62.071068 c
2.813209 61.955345 2.700394 61.836853 2.590489 61.715588 c
2.480583 61.59433 2.373719 61.470444 2.269896 61.343933 c
2.166072 61.217426 2.065415 61.088444 1.967925 60.956993 c
1.870434 60.825539 1.776227 60.691772 1.685304 60.555698 c
1.594381 60.419624 1.50685 60.281399 1.422714 60.141022 c
1.338577 60.000648 1.257935 59.858295 1.180787 59.713963 c
1.10364 59.569626 1.03008 59.423489 0.960107 59.275543 c
0.890134 59.127598 0.823834 58.978024 0.761205 58.826828 c
0.698576 58.675625 0.639694 58.522984 0.584559 58.368896 c
0.529425 58.214802 0.478104 58.059452 0.430597 57.902843 c
0.383089 57.746231 0.339453 57.588547 0.299687 57.429798 c
0.259922 57.271046 0.224075 57.111412 0.192147 56.950901 c
0.160219 56.79039 0.132248 56.629189 0.108235 56.467304 c
0.084221 56.305416 0.064194 56.14304 0.048153 55.980171 c
0.032111 55.817303 0.020076 55.654137 0.012045 55.490677 c
0.004015 55.327213 0 55.163654 0 55 c
0 10 l
0 9.836343 0.004015 9.672784 0.012045 9.509323 c
0.020076 9.345862 0.032111 9.182698 0.048153 9.019829 c
0.064194 8.856959 0.084221 8.694581 0.108235 8.532695 c
0.132248 8.370809 0.160219 8.209609 0.192147 8.049096 c
0.224075 7.888583 0.259922 7.72895 0.299687 7.570198 c
0.339453 7.411445 0.383089 7.253763 0.430597 7.097153 c
0.478104 6.940542 0.529425 6.785191 0.584559 6.6311 c
0.639694 6.47701 0.698576 6.324365 0.761205 6.173165 c
0.823834 6.021965 0.890134 5.872393 0.960107 5.724448 c
1.03008 5.576504 1.10364 5.430366 1.180787 5.286033 c
1.257935 5.141699 1.338577 4.999346 1.422714 4.858972 c
1.50685 4.718598 1.59438 4.580373 1.685304 4.444297 c
1.776227 4.308221 1.870434 4.174457 1.967925 4.043006 c
2.065415 3.911555 2.166072 3.782576 2.269896 3.656067 c
2.373719 3.529558 2.480583 3.405672 2.590489 3.28441 c
2.700394 3.163148 2.813209 3.044655 2.928932 2.928932 c
3.044655 2.813209 3.163148 2.700394 3.28441 2.590489 c
3.405672 2.480583 3.529558 2.373719 3.656067 2.269896 c
3.782576 2.166072 3.911555 2.065415 4.043006 1.967925 c
4.174457 1.870434 4.308221 1.776227 4.444297 1.685304 c
4.580373 1.594381 4.718598 1.50685 4.858972 1.422714 c
4.999346 1.338577 5.141699 1.257935 5.286032 1.180787 c
5.430365 1.10364 5.576504 1.03008 5.724448 0.960107 c
5.872393 0.890134 6.021965 0.823834 6.173165 0.761205 c
6.324365 0.698576 6.47701 0.639694 6.631101 0.584559 c
6.785191 0.529425 6.940542 0.478104 7.097153 0.430597 c
7.253763 0.383089 7.411445 0.339453 7.570198 0.299687 c
7.72895 0.259922 7.888583 0.224075 8.049096 0.192147 c
8.209609 0.160219 8.370809 0.132248 8.532695 0.108235 c
8.694581 0.084221 8.856959 0.064194 9.019829 0.048153 c
9.182698 0.032111 9.345862 0.020076 9.509323 0.012045 c
9.672784 0.004015 9.836343 0 10 0 c
h
f
Q
q
[19.31986 0 0 19.328854 788.32404 537.53027] cm
/DeviceRGB {} CS
[0.2235 0.2431 0.2745] SC
/DeviceRGB {} cs
[0.2235 0.2431 0.2745] sc
46.706001 17.808001 m
46.9259 16.5896 62.606003 24.2994 61.945 24.982201 c
58.641899 29.812601 55.8106 35.266201 53.315201 41.0182 c
50.8181 46.773899 48.639301 52.822201 46.528 58.946198 c
46.046242 60.272598 41.016899 59.343468 40.917198 57.875896 c
40.917843 57.857441 40.919132 57.838982 40.919777 57.820526 c
40.846066 57.751266 40.780617 57.674385 40.736137 57.579067 c
38.720039 52.197067 36.742836 46.829067 34.568138 41.618065 c
33.902679 40.029163 33.215637 38.453564 32.506939 36.898964 c
31.707378 38.602264 30.917339 40.317665 30.140039 42.048363 c
23.411039 57.283363 l
23.411684 57.467052 23.415493 57.651394 23.415493 57.835083 c
23.395805 59.241585 18.327694 59.931183 17.763393 58.661343 c
15.958994 52.747944 13.817694 46.977341 11.367993 41.42334 c
8.914093 35.876041 6.139093 30.53434 3.018993 25.63534 c
2.377053 24.929859 18.329994 17.804741 18.484993 18.965139 c
20.289993 25.51054 21.471592 32.01614 22.259092 38.494141 c
22.475193 40.301041 22.657593 42.105442 22.812693 43.907341 c
23.728592 39.887341 l
24.395311 37.040642 25.086891 34.187542 25.851492 31.320541 c
26.620512 28.451542 27.447392 25.574942 28.492891 22.636742 c
28.602871 22.208363 30.322092 22.763241 32.24469 23.602861 c
34.27599 22.641241 36.174389 21.954161 36.297089 22.400961 c
38.475189 28.178961 39.858788 33.923962 41.038387 39.637962 c
41.314827 40.996864 41.575397 42.354362 41.827087 43.710064 c
41.996128 41.848465 42.189377 39.980564 42.420696 38.103065 c
43.248215 31.427465 44.524498 24.628065 46.706398 17.808065 c
46.706001 17.808001 l
h
f
Q
q
[52.696686 0 0 52.721214 3105.4492 -274.39825] cm
/DeviceRGB {} CS
[0.9333 0.9333 0.9333] SC
/DeviceRGB {} cs
[0.9333 0.9333 0.9333] sc
28.129999 12.123 m
29.275 12.5238 29.8783 13.7766 29.478298 14.9208 c
21.215498 38.528801 l
20.907219 39.409721 20.075998 39.999401 19.142698 39.999401 c
18.209398 39.999401 17.378199 39.409481 17.069899 38.528801 c
15.601298 34.333202 l
14.132698 38.528801 l
13.824418 39.409721 12.993198 39.999401 12.059898 39.999401 c
11.126598 39.999401 10.295399 39.40976 9.987099 38.528801 c
1.724299 14.920801 l
1.323498 13.776101 1.926598 12.523301 3.071599 12.122801 c
4.215199 11.722281 5.468899 12.325101 5.869598 13.4701 c
12.059599 31.156101 l
18.249599 13.4701 l
18.6504 12.3254 19.903799 11.722301 21.0476 12.122801 c
22.1926 12.523601 22.795599 13.776401 22.394899 14.921101 c
17.927299 27.6861 l
19.142 31.1562 l
25.332001 13.4702 l
25.732801 12.3255 26.9862 11.7224 28.130001 12.1229 c
28.129999 12.123 l
h
33.5 12 m
34.713001 12 35.695999 12.98328 35.695999 14.196 c
35.695999 37.804001 l
35.695999 39.0168 34.712719 40 33.5 40 c
32.287281 40 31.304001 39.01672 31.304001 37.804001 c
31.304001 14.196001 l
31.304001 12.983201 32.287281 12.000001 33.5 12.000001 c
33.5 12 l
h
56.130001 12 m
57.3428 12 58.326 12.98328 58.326 14.196 c
58.326 15.40872 57.34272 16.392 56.130001 16.392 c
44.906002 16.392 l
49.419601 20.9056 l
50.277161 21.763159 50.277161 23.153599 49.419601 24.0112 c
48.990803 24.440001 48.428642 24.65436 47.866703 24.65436 c
47.304504 24.65436 46.742603 24.43998 46.313805 24.0112 c
38.051003 15.7484 l
37.422924 15.120319 37.235161 14.1758 37.575241 13.3552 c
37.915321 12.534599 38.716042 11.9997 39.604141 11.9997 c
56.129143 11.9997 l
56.130001 12 l
h
41.1572 20.906 m
49.419998 29.1684 l
49.831757 29.58016 50.06316 30.1388 50.06316 30.7213 c
50.06316 37.803699 l
50.06316 39.016499 49.07988 39.999699 47.867161 39.999699 c
46.654442 39.999699 45.671162 39.016418 45.671162 37.803699 c
45.671162 31.6311 l
38.051563 24.011499 l
37.194004 23.15394 37.194004 21.7635 38.051563 20.905899 c
38.909683 20.048059 40.300064 20.04834 41.157364 20.905899 c
41.1572 20.906 l
h
64.286003 19.412001 m
69.962402 19.412001 74.580002 24.0296 74.580002 29.706001 c
74.580002 35.382401 69.962402 40 64.286003 40 c
58.609604 40 53.992004 35.382401 53.992004 29.706001 c
53.992004 24.029602 58.609604 19.412003 64.286003 19.412003 c
64.286003 19.412001 l
h
64.286003 35.608002 m
67.540306 35.608002 70.188004 32.960403 70.188004 29.706001 c
70.188004 26.451599 67.540405 23.804001 64.286003 23.804001 c
61.031601 23.804001 58.384003 26.451601 58.384003 29.706001 c
58.384003 32.960403 61.031601 35.608002 64.286003 35.608002 c
h
86.523003 19.412001 m
92.184204 19.412001 96.789001 24.017601 96.789001 29.679001 c
96.789001 35.340401 92.183403 39.945999 86.522003 39.945999 c
84.338303 39.945999 82.313202 39.258358 80.647606 38.091698 c
80.647606 45.216599 l
80.647606 46.429398 79.66433 47.412598 78.451607 47.412598 c
77.238884 47.412598 76.255608 46.429317 76.255608 45.216599 c
76.255608 21.608599 l
76.255608 20.395798 77.238884 19.412598 78.451607 19.412598 c
79.554306 19.412598 80.464607 20.226238 80.621307 21.285597 c
82.292206 20.107397 84.327209 19.412598 86.522507 19.412598 c
86.523003 19.412001 l
h
86.523003 35.552799 m
89.762199 35.552799 92.3974 32.9175 92.3974 29.678398 c
92.3974 26.439297 89.7621 23.803997 86.523003 23.803997 c
83.283905 23.803997 80.648605 26.439297 80.648605 29.678398 c
80.648605 32.9175 83.283905 35.552799 86.523003 35.552799 c
h
100.636002 19.412001 m
101.848801 19.412001 102.832001 20.395281 102.832001 21.608002 c
102.832001 37.804001 l
102.832001 39.0168 101.848724 40 100.636002 40 c
99.423279 40 98.440002 39.01672 98.440002 37.804001 c
98.440002 21.608002 l
98.440002 20.395203 99.423279 19.412003 100.636002 19.412003 c
100.636002 19.412001 l
h
98.607399 15.036 m
98.552513 14.904241 98.511345 14.7642 98.483879 14.6242 c
98.453682 14.4842 98.439972 14.33869 98.439972 14.19596 c
98.439972 14.05323 98.453682 13.90772 98.483879 13.76772 c
98.511337 13.62772 98.552513 13.487721 98.607399 13.35596 c
98.662285 13.224199 98.730919 13.09518 98.810516 12.97713 c
98.890121 12.85635 98.980713 12.74381 99.082275 12.64225 c
99.183838 12.54069 99.296379 12.4501 99.417152 12.37049 c
99.535202 12.290882 99.664223 12.22225 99.795982 12.16737 c
99.927742 12.11249 100.067741 12.071314 100.207741 12.04385 c
100.921463 11.89834 101.679138 12.134438 102.189743 12.64229 c
102.288574 12.74385 102.381889 12.85639 102.461502 12.97717 c
102.541107 13.09522 102.609741 13.22424 102.664619 13.356 c
102.719498 13.48776 102.760674 13.62776 102.788139 13.76776 c
102.818336 13.907761 102.832047 14.05327 102.832047 14.196 c
102.832047 14.33873 102.818336 14.484241 102.788139 14.62424 c
102.760681 14.76424 102.719505 14.90424 102.664619 15.036 c
102.609734 15.167761 102.5411 15.296781 102.461502 15.41483 c
102.381897 15.53561 102.288574 15.64815 102.189743 15.74971 c
102.088181 15.85127 101.975639 15.94186 101.854866 16.021469 c
101.736816 16.101078 101.607796 16.169708 101.476036 16.224588 c
101.344276 16.279469 101.204277 16.320644 101.064278 16.348108 c
100.924278 16.378303 100.77877 16.392016 100.63604 16.392016 c
100.493309 16.392016 100.347801 16.378303 100.207802 16.348108 c
100.067802 16.320648 99.927803 16.279476 99.796043 16.224588 c
99.664284 16.169701 99.535263 16.101069 99.417213 16.021469 c
99.296432 15.941861 99.183891 15.851269 99.082336 15.749709 c
98.980782 15.648149 98.89019 15.535609 98.810577 15.414829 c
98.730972 15.29678 98.662338 15.167759 98.60746 15.035999 c
98.607399 15.036 l
h
122.935997 19.412001 m
124.148796 19.412001 125.131996 20.395281 125.131996 21.608002 c
125.131996 37.804001 l
125.131996 39.0168 124.14872 40 122.935997 40 c
121.828896 40 120.915894 39.180321 120.764397 38.115002 c
119.087395 39.300602 117.043396 40 114.837997 40 c
109.161598 40 104.543999 35.382401 104.543999 29.706001 c
104.543999 24.029602 109.161598 19.412003 114.837997 19.412003 c
117.043396 19.412003 119.087196 20.111443 120.764397 21.297003 c
120.915916 20.231604 121.828896 19.412003 122.935997 19.412003 c
122.935997 19.412001 l
h
114.837997 35.608002 m
118.0923 35.608002 120.739998 32.960403 120.739998 29.706001 c
120.739998 26.451599 118.0924 23.804001 114.837997 23.804001 c
111.583595 23.804001 108.935997 26.451601 108.935997 29.706001 c
108.935997 32.960403 111.583595 35.608002 114.837997 35.608002 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
